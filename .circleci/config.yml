version: 2.1

orbs:
  docker: circleci/docker@1.0.1
  kubernetes: circleci/kubernetes@0.11.0

parameters:
  check:
    type: boolean
    default: true
  build:
    type: boolean
    default: false
  run_e2e_tests:
    type: boolean
    default: false

commands:
  with_gradle_cache:
    description: |
      Run a set of steps with gradle dependencies cached.
      This command will first restore a cache of gradle dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.
      The contents of the `~/.gradle` directory is cached, which will substantially
      improve build times for projects with many dependencies.
      The cache-key is generated from any files named `build.gradle` (can be overriden by `build_file` parameter)
      that are present in the `working_directory`.
    parameters:
      steps:
        type: steps
      cache_key:
        description: Add a custom suffix to your cache key in the event you need to work with multiple gradle caches.
        type: string
        default: 'v1'
      build_file:
        description: Override gradle build file name (for example with `build.gradle.kts`)
        type: string
        default: 'build.gradle'
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name '<< parameters.build_file >>' | sort | xargs cat | shasum | awk '{print $1}' > /tmp/gradle_cache_seed
      - restore_cache:
          key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
          key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}

jobs:
  check-build-needed:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Determine if changes made to VCS require build
          command: .circleci/check.sh
  build-app-executable-jar:
    docker:
      - image: 'cimg/openjdk:14.0'
    steps:
      - checkout
      - with_gradle_cache:
          build_file: 'build.gradle.kts'
          steps:
            - run:
                command: ./gradlew build
      - persist_to_workspace:
          root: app
          paths:
            - build/libs/app-*.jar
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
  build-and-publish-docker-image:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - attach_workspace:
          at: app
      - docker/build:
          path: app
          image: sevteen/lobiani-app
      - docker/push:
          digest-path: /tmp/digest.txt
          image: sevteen/lobiani-app
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  spin-up-test-env:
    docker:
      - image: hashicorp/terraform:0.12.28
    steps:
      - checkout
      - run:
          name: Spin up the test environment
          command: |
            cd infra-config/terraform/test
            terraform init -backend-config="token=${TF_API_TOKEN}"
            terraform apply --auto-approve=true
            terraform output | cut -d'=' | awk '{print $2}' > cluster_endpoint.txt
            cd -
      - persist_to_workspace:
          root: infra-config
          paths:
            - terraform/test/cluster_endpoint.txt
  deploy-to-test-env:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - attach_workspace:
          at: infra-config
      - run:
          name: Capture test cluster endpoint
          command: |
            export TEST_CLUSTER_ENDPOINT=`cat infra-config/terraform/test/cluster_endpoint.txt`
      - run:
          name: Download Argo CD CLI
          command: |
            # ARGOCD_AUTH_TOKEN env is expected by argocd
            curl -sSL -o /usr/local/bin/argocd https://argocd.baybay.dev/download/argocd-linux-amd64
      - run:
          name: Deploy app of apps to test environment
          command: |
            argocd app create test-apps --repo git@bitbucket.org:sevteen/lobiani \
                --path infra-config/apps --dest-namespace argocd \
                --dest-server https://kubernetes.default.svc \
                --sync-policy automated --auto-prune -l environment=test \
                --revision $CIRCLE_BRANCH \
                --helm-set spec.destination.server=$TEST_CLUSTER_ENDPOINT \
                --values test-values.yaml \
                --upsert
      - run:
          name: Sync and wait
          command: |
            argocd app sync test-apps
            argocd app wait -l app.kubernetes.io/instance=test-apps
  run-e2e-tests:
    docker:
      - image: 'cimg/openjdk:14.0'
    steps:
      - checkout
      - run:
          name: Run e2e tests
          command: ./gradlew app:e2eTestRemote

workflows:
  check:
    when: << pipeline.parameters.check >>
    jobs:
      - check-build-needed:
          filters:
            branches:
              only:
                - master
  build:
    when: << pipeline.parameters.build >>
    jobs:
      - build-app-executable-jar:
          filters:
            branches:
              only:
                - master
      - build-and-publish-docker-image:
          filters:
            branches:
              only:
                - master
          requires:
            - build-app-executable-jar
  e2e-test:
    when: << pipeline.parameters.run_e2e_tests >>
    jobs:
      - spin-up-test-env:
          filters:
            branches:
              only:
                - master
      - deploy-to-test-env:
          filters:
            branches:
              only:
                - master
          requires:
            - spin-up-test-env
      - run-e2e-tests:
          filters:
            branches:
              only:
                - master
          requires:
            - deploy-to-test-env
