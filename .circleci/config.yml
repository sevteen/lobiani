version: 2.1

orbs:
  docker: circleci/docker@1.0.1
  kubernetes: circleci/kubernetes@0.11.0

parameters:
  check:
    type: boolean
    default: true
  build:
    type: boolean
    default: false
  deploy:
    type: boolean
    default: false

commands:
  with_gradle_cache:
    description: |
      Run a set of steps with gradle dependencies cached.
      This command will first restore a cache of gradle dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.
      The contents of the `~/.gradle` directory is cached, which will substantially
      improve build times for projects with many dependencies.
      The cache-key is generated from any files named `build.gradle` (can be overriden by `build_file` parameter)
      that are present in the `working_directory`.
    parameters:
      steps:
        type: steps
      cache_key:
        description: Add a custom suffix to your cache key in the event you need to work with multiple gradle caches.
        type: string
        default: 'v1'
      build_file:
        description: Override gradle build file name (for example with `build.gradle.kts`)
        type: string
        default: 'build.gradle'
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name '<< parameters.build_file >>' | sort | xargs cat | shasum | awk '{print $1}' > /tmp/gradle_cache_seed
      - restore_cache:
          key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
          key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}

jobs:
  check-build-needed:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Determine if changes require rebuild
          command: |
            function trigger_pipeline {
              local check=$1
              local build=$2
              local deploy=$3
              curl -s -u ${CIRCLE_API_USER_TOKEN}: \
                   -H "Content-Type: application/json" \
                   -d "{
                          \"parameters\": {
                              \"check\": $check,
                              \"build\": $build,
                              \"deploy\": $deploy
                          }
                       }" \
                   https://circleci.com/api/v2/project/$PROJECT_SLUG/pipeline
            }

            # Identify modified directories
            PROJECT_SLUG="bitbucket/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            LAST_COMPLETED_BUILD_URL="https://circleci.com/api/v1.1/project/$PROJECT_SLUG/tree/$CIRCLE_BRANCH?filter=completed&limit=1"
            LAST_SUCCESSFUL_COMMIT=`curl -Ss -u "$CIRCLE_API_USER_TOKEN:" $LAST_COMPLETED_BUILD_URL | jq -r '.[0]["vcs_revision"]'`

            # First commit in a branch
            if [[ ${LAST_SUCCESSFUL_COMMIT} == "null" ]]; then
              COMMITS="origin/master"
            else
              COMMITS="${CIRCLE_SHA1}..${LAST_SUCCESSFUL_COMMIT}"
            fi

            git diff --name-only $COMMITS | cut -d/ -f1 | sort -u > modified-dirs
            echo -e "Modified directories:\n`cat modified-dirs`\n"

            code_dir="app"
            infra_dir="infra-config"

            if  grep -Fxq $code_dir modified-dirs; then
              echo "Triggering the build for $code_dir"
              trigger_pipeline false true false
            else
              echo "No changes made to $code_dir, not triggering the build"
            fi

            if grep -Fxq $infra_dir modified-dirs; then
              echo "Triggering the deploy"
              trigger_pipeline false false true
            else
              echo "No changes made to $infra_dir, not triggering the deploy"
            fi
  build-app-executable-jar:
    docker:
      - image: 'cimg/openjdk:14.0'
    steps:
      - checkout
      - with_gradle_cache:
          build_file: 'build.gradle.kts'
          steps:
            - run:
                command: ./gradlew build
      - persist_to_workspace:
          root: app
          paths:
            - build/libs/app-*.jar
  build-and-publish-docker-image:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - attach_workspace:
          at: app
      - docker/build:
          path: app
          image: sevteen/lobiani-app
      - docker/push:
          digest-path: /tmp/digest.txt
          image: sevteen/lobiani-app
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  deploy:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubernetes/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: infra-config/kube-resources.yaml
          resource-name: deployment/lobiani-app
          show-kubectl-command: true
          namespace: sevteen

workflows:
  check:
    when: << pipeline.parameters.check >>
    jobs:
      - check-build-needed
  build:
    when: << pipeline.parameters.build >>
    jobs:
      - build-app-executable-jar
      - build-and-publish-docker-image:
          requires:
            - build-app-executable-jar
  deploy:
    when: << pipeline.parameters.deploy >>
    jobs:
      - deploy
